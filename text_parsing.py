# -*- coding: utf-8 -*-
"""text parsing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12B-fyrLBv4kfe3bFP5vZh65Hfzn5LaJ1
"""

import numpy as np
import pandas as pd

df2=pd.read_csv("abcnews-date-text.csv")
df2['headline_text'][0]+=" denied"
data_text = df2[['headline_text']]

df2.head()

df=pd.read_csv("abcnews-date-text.csv")
df['headline_text'][0]+=" denied"
data_text = df[['headline_text']]
data_text['index'] = data_text.index
documents = data_text

len(documents)



df['headline_text'][0]

documents['headline_text'][0]

len(df)

documents.index

documents["headline_text"][0]

import gensim
from gensim.utils import simple_preprocess
from gensim.parsing.preprocessing import STOPWORDS
from nltk.stem import WordNetLemmatizer, SnowballStemmer
from nltk.stem.porter import *
import numpy as np
np.random.seed(2018)

import nltk
nltk.download('wordnet')

print(WordNetLemmatizer().lemmatize('against community broadcasting licence', pos='v'))

def deneme(text):
    return (WordNetLemmatizer().lemmatize(text, pos='v'))

deneme("flies")

stemmer = SnowballStemmer('english')
original_words = ['caresses', 'flies', 'dies', 'mules', 'denied','died', 'agreed', 'owned', 
           'humbled', 'sized','meeting', 'stating', 'siezing', 'itemization','sensational', 
           'traditional', 'reference', 'colonizer','plotted','penalties']
singles = [stemmer.stem(plural) for plural in original_words]
pd.DataFrame(data = {'original word': original_words, 'stemmed': singles})

def lemmatize_stemming(text):
    return (WordNetLemmatizer().lemmatize(text, pos='v'))

def preprocess(text):
    result = []
    for token in gensim.utils.simple_preprocess(text):
        if len(token) > 3: #if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 3:
            result.append(lemmatize_stemming(token))
    return result

print(preprocess("denied against community broadcasting licence"))

print(lemmatize_stemming("denied"))

documents[documents['index'] == 0].values[0][0]

doc_sample = documents[documents['index'] == 0].values[0][0]

print('original document: ')
words = []
for word in doc_sample.split(' '):
    words.append(word)
print(words)
print('\n\n tokenized and lemmatized document: ')
print(preprocess(doc_sample))

processed_docs = documents['headline_text'][:20].map(preprocess)

processed_docs.head()

df['headline_text'][0]

processed_docs[0]

dictionary = gensim.corpora.Dictionary(processed_docs)

count = 0
for k, v in dictionary.iteritems():
    print(k, v)

dictionary.filter_extremes(no_below=15, no_above=0.5, keep_n=100000)



processed_docs[0]

processed_docs

bow_corpus = [dictionary.doc2bow(doc) for doc in processed_docs]
bow_corpus[0]

bow_doc_4310 = bow_corpus[1]

for i in range(len(bow_doc_4310)):
    print("Word {} (\"{}\") appears {} time.".format(bow_doc_4310[i][0], 
                                                     dictionary[bow_doc_4310[i][0]], 
                                                     bow_doc_4310[i][1]))

lda_model = gensim.models.LdaMulticore(bow_corpus, num_topics=10, id2word=dictionary, passes=2, workers=2)

for idx, topic in lda_model.print_topics(-1):
    print('Topic: {} \nWords: {}'.format(idx, topic))

processed_docs[5]

df['headline_text'][5]

for index, score in sorted(lda_model[bow_corpus[5]], key=lambda tup: -1*tup[1]):
    print("\nScore: {}\t \nTopic: {}".format(score, lda_model.print_topic(index, 10)))

corpus_tfidf = tfidf[bow_corpus]

from gensim import corpora, models

tfidf = models.TfidfModel(bow_corpus)

lda_model_tfidf = gensim.models.LdaMulticore(corpus_tfidf, num_topics=1, id2word=dictionary, passes=2, workers=4)

for idx, topic in lda_model_tfidf.print_topics(-1):
    print('Topic: {} Word: {}'.format(idx, topic))

df['headline_text'][0]

for index, score in sorted(lda_model_tfidf[bow_corpus[0]], key=lambda tup: -1*tup[1]):
    print("\nScore: {}\t \nTopic: {}".format(score, lda_model_tfidf.print_topic(index, 10)))

